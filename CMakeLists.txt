PROJECT(Karazeh)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

INCLUDE (CheckIncludeFileCXX)

SET( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMake ${CMAKE_SOURCE_DIR}/CMake/Packages )

FIND_PACKAGE(PkgConfig)
FIND_PACKAGE(OIS REQUIRED)
FIND_PACKAGE(log4cpp REQUIRED)
FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(BZip2 REQUIRED)
FIND_PACKAGE(Boost COMPONENTS filesystem thread date_time REQUIRED)
# optional dependencies
FIND_PACKAGE(OGRE COMPONENTS RenderSystem_Direct3D9 RenderSystem_GL)
FIND_PACKAGE(Qt)

# project version
SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
SET( ${PROJECT_NAME}_MINOR_VERSION 1 )
SET( ${PROJECT_NAME}_BUILD_LEVEL 0 )

IF( NOT CMAKE_BUILD_TYPE )
  SET( CMAKE_BUILD_TYPE "RelWithDebInfo" )
ENDIF()

# options
OPTION(KARAZEH_RENDERER_OGRE "Build Ogre renderer using SdkTrays" OFF)
OPTION(KARAZEH_RENDERER_Qt "Build Qt renderer" OFF)
#OPTION(KARAZEH_USE_BOOST "Use boost libraries instead of POCO" ON)
#OPTION(KARAZEH_USE_POCO "Use POCO libraries instead of boost" OFF)

# add sources
AUX_SOURCE_DIRECTORY(src Karazeh_SRCS)

# renderers
IF(KARAZEH_RENDERER_OGRE)
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/KarazehConfig.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/include/KarazehConfig.h
  )
  AUX_SOURCE_DIRECTORY(src/Renderers/Ogre Karazeh_SRCS)
  INCLUDE_DIRECTORIES(${OGRE_INCLUDE_DIRS})
  LINK_DIRECTORIES(${OGRE_LIBRARY_DIRS})
  LINK_LIBRARIES(${OGRE_LIBRARIES})
ENDIF()
IF(KARAZEH_RENDERER_Qt)
  CONFIGURE_FILE(
    ${CMAKE_CURRENT_SOURCE_DIR}/KarazehConfig.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/include/KarazehConfig.h
  )
  AUX_SOURCE_DIRECTORY(src/Renderers/Qt Karazeh_SRCS)
  INCLUDE_DIRECTORIES(${Qt_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Qt_LIBRARY_DIRS})
  LINK_LIBRARIES(${Qt_LIBRARIES})
ENDIF()

# common includes and libraries
INCLUDE_DIRECTORIES(include
                       ${CMAKE_CURRENT_BINARY_DIR}
                       ${OIS_INCLUDE_DIRS}
                       ${LOG4CPP_INCLUDE_DIRS}
                       ${CURL_INCLUDE_DIRS}
                       ${BOOST_INCLUDE_DIRS})

LINK_DIRECTORIES(${BOOST_LIBRARY_DIRS} ${OIS_LIBRARY_DIRS} ${CURL_LIBRARY_DIRS} ${BZip2_LIBRARY_DIRS})
LINK_LIBRARIES(${OIS_LIBRARIES} boost_thread boost_filesystem boost_date_time ${CURL_LIBRARIES} log4cpp bz2)

ADD_EXECUTABLE(bin/${PROJECT_NAME} ${Karazeh_SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${Karazeh_LIBRARIES})
