IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.")
ELSE()
   SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.")
ENDIF()

PROJECT(Karazeh)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

INCLUDE (CheckIncludeFileCXX)
INCLUDE (CMakeDependentOption)

SET( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMake ${CMAKE_SOURCE_DIR}/CMake/Packages )

FIND_PACKAGE(PkgConfig)
FIND_PACKAGE(Boost COMPONENTS filesystem REQUIRED)
FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(BZip2 REQUIRED)
# optional dependencies
FIND_PACKAGE(log4cpp)
FIND_PACKAGE(Boost COMPONENTS thread)


# project version
SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
SET( ${PROJECT_NAME}_MINOR_VERSION 1 )
SET( ${PROJECT_NAME}_BUILD_LEVEL 0 )

if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "No build type selected, default to Release")
  set(CMAKE_BUILD_TYPE "Release")
endif()


# options
OPTION(KARAZEH_RENDERER_OGRE "Build Ogre renderer" OFF)
OPTION(KARAZEH_RENDERER_QT "Build Qt renderer" OFF)
if(Boost_THREAD_FOUND)
  OPTION(KARAZEH_THREADS_BOOST "Use boost threads, must choose EXACTLY one" !KARAZEH_THREADS_QT)
endif()
OPTION(KARAZEH_USE_LOG4CPP "Use log4cpp for logging" ON)


SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_SOURCE_DIR}/bin")
SET(CMAKE_C_FLAGS "-DENABLE_BINRELOC")

# common includes and libraries
INCLUDE_DIRECTORIES(
  include
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CURL_INCLUDE_DIRS}
  ${BOOST_INCLUDE_DIRS}
  ${BZIP2_INCLUDE_DIR}
)

IF(KARAZEH_USE_LOG4CPP)
  INCLUDE_DIRECTORIES(${LOG4CPP_INCLUDE_DIRS})
  LINK_LIBRARIES( log4cpp )
ENDIF()

IF (KARAZEH_THREADS_BOOST)
  LINK_LIBRARIES( boost_thread )
ENDIF()

CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/KarazehConfig.h.cmake ${CMAKE_SOURCE_DIR}/include/KarazehConfig.h )

LINK_DIRECTORIES(${BOOST_LIBRARY_DIRS} ${CURL_LIBRARY_DIRS} ${BZip2_LIBRARY_DIRS})
LINK_LIBRARIES( boost_filesystem ${CURL_LIBRARIES} ${BZIP2_LIBRARIES})

ADD_SUBDIRECTORY(src)


